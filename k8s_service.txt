Services in K8s:


1 - ClsuterIP : ClusterIP is the default service type in Kubernetes, and it provides internal connectivity between different components of our application.
                Kubernetes assigns a virtual IP address to a ClusterIP service that can solely be accessed from within the cluster during its creation. 
                This IP address is stable and doesn’t change even if the pods behind the service are rescheduled or replaced.


                ClusterIP services are an excellent choice for internal communication between different components of our 
                application that don’t need to be exposed to the outside world. For example, 
                if we have a microservice that processes data and sends it to another microservice for further processing, we can use a ClusterIP service to connect them.
  

                yml file example:

                apiVersion: v1
                kind: Service
                metadata:
                   name: backend
                spec:
                  selector:
                      app: backend
                ports:
                 - name: http
                   port: 80
                   targetPort: 8080



2 - Node Port : NodePort services extend the functionality of ClusterIP services by enabling external connectivity to our application. When we create a NodePort service on any node within the cluster that meets the 
                defined 
                criteria, Kubernetes opens up a designated port that forwards traffic to the corresponding ClusterIP service running on the node.

                These services are ideal for applications that need to be accessible from outside the cluster, such as web applications or APIs. With NodePort services, we can access our application using the node’s IP 
                address and the port number assigned to the service. 

               apiVersion: v1 
               kind: Service 
               metadata: 
                  name: frontend 
               spec: 
                 selector: 
                    app: frontend 
                    type: NodePort 
              ports: 
                - name: http 
                  port: 80 
                  targetPort: 8080

                We define a service named frontend that targets pods labeled with app: frontend by setting a selector. 
                The service exposes port 80 and forwards the traffic to the pods’ port 8080. We set the service type to NodePort,
                and Kubernetes exposes the service on a specific port on a qualifying node within the cluster.









